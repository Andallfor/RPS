import tensorflow as tf
from keras import layers, models, datasets
import matplotlib as plt
import numpy as np
import cv2 as opencv
from collections import Counter


#Get the dataset ready
(training_img, training_label), (testing_img, testing_label) = tf.keras.datasets.cifar100.load_data()
training_img = training_img / 255
testing_img = testing_img / 255
number_of_classes = 10

#The model
model = tf.keras.models.Sequential()
model.add(layers.Conv2D(32, (3,3), activation = 'relu', input_shape=(32,32,3)))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.Flatten())
model.add(layers.Dense(64, activation = 'relu'))
model.add(layers.Dense(100))

predictions = [model.predict(training_img[n]) for n in range(0, len(training_img))
#for n in range(0, len(predictions)):
	#prediction[n] = np.argmax(predictions[n], axis = 1)
#validation_predictions = [model.predict(testing_img[n] for n in range(0, len(testing_image)))]

for n in range(0, len(predictions)):
	validation_predictions[n] = np.argmax(validation_predictions[n], axis = 1)

model_1_predictor = tf.keras.models.Sequential()
model_1_predictor_x.add(layers.Conv2D(32, (3,3), activation = 'relu', input_shape=(32,32,3)))
model_1_predictor_x.add(layers.MaxPooling2D((2,2)))
model_1_predictor_x.add(layers.Conv2D(64, (3, 3), activation='relu'))
model_1_predictor_x.add(layers.MaxPooling2D((2,2)))
model_1_predictor_x.add(layers.Conv2D(64, (3, 3), activation='relu'))
model_1_predictor_x.add(layers.Flatten())
model_1_predictor_x.add(layers.Dense(64, activation = 'relu'))
model_1_predictor_x.add(layers.Dense(2))
model_1_predictor_x.compile(optimizer = 'adam', loss = tf.keras.losses.SparseCategoricalCrossentropy (from_logits=True), metrics = ["accuracy"])
implementation_predictor = model_1_predictor.fit(training_img, predictions, epochs = 2, validation_data = (testing_img, validation_predictions))

model.summary()

#Implement the model
#Note: Create a single function for creating the model. Don't go through this every time. Return the model.


